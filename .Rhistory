row_pat_cell<-intersect(row_pat,row_cell)##common genes
union_reactome<-union(Patient.Reactome$ID,Cell.Reactome$ID)## union of pathways bet patient-cell line
patients_DE<-intersect(Patient.D.Genes$gene,row_pat_cell)
cellLines_DE<-intersect(Cell.D.Genes$gene,row_pat_cell)
union_de_genes1<-union(Patient.D.Genes$gene,Cell.D.Genes$gene)# union DE genes bet patient cell line
union_de_genes<-intersect(union_de_genes1,row_pat_cell)
Lx<-Patient.Expr.Meth.CNV[union_de_genes,]## patient's Patient.Expr.Meth.CNV with common DE genes
Lx<-Patient.Expr.Meth.CNV[union_de_genes,,drop=F]## patient's Patient.Expr.Meth.CNV with common DE genes
r1<-data.table(row.names(Lx))
colnames(r1)<-"g"
Lx<-cbind(r1,Lx)
Ly<-as.data.frame(Cell.Expr.Meth.CNV[union_de_genes,,drop=FALSE])## cell line's Patient.Expr.Meth.CNV with union DE genes
r2<-data.table(row.names(Ly))
colnames(r2)<-"g"
Ly<-cbind(r2,Ly)
### For reactome
reactome_pathNames<-union_reactome
reactome_genes_by_term = data.frame(cbind(pathfindR.data::reactome_genes))
reactome_term_descriptions = data.frame(pathfindR.data::reactome_descriptions)
reactome_descriptions <- as.character(reactome_term_descriptions[reactome_pathNames,])
reactome_pathway_genes<-data.table(unique(unlist(reactome_genes_by_term[reactome_pathNames,])))## taking union of genes in all intersected pathways
colnames(reactome_pathway_genes)<-"g"
Common_DE_genes_pathway <-unique(intersect(reactome_pathway_genes$g,union_de_genes))
colnames(reactome_pathway_genes)<-"g"
reactomeLx <- merge(reactome_pathway_genes,Lx,by="g")
reactomeLy <- merge(reactome_pathway_genes,Ly,by="g")
ncol(Patient.Expr.Meth.CNV)==1
reactome_spearCorr1<-cor(reactomeLy[,2],reactomeLx[,2],use ="complete",method=c("spearman"))
x1<-data.frame(reactome_spearCorr1[1])
colnames(x1)<-"V1"
devtools::load_all()
FindSimFun(Patient.D.Genes=pat_da_genes,Patient.Reactome=pat_reactome,Patient.Expr.Meth.CNV=pat_cnv,Cell.D.Genes=cell_da_genes,Cell.Reactome=cell_reactome,Cell.Expr.Meth.CNV=ccle_cnv)
FindSimFun(Patient.D.Genes=pat_dm_genes,Patient.Reactome=pat_reactome,Patient.Expr.Meth.CNV=Deconv_meth_gene,Cell.D.Genes=cell_dm_genes,Cell.Reactome=cell_reactome,Cell.Expr.Meth.CNV=ccle_methylation)
load("~/CTDPathSim2.0/data/CTDData.RData")
ls()
load("~/CTDPathSim2.0/data/cell_de_genes.Rda")
load("~/CTDPathSim2.0/data/Deconv_expression.Rda")
load("~/CTDPathSim2.0/data/Expression.CellLine.Rda")
load("~/CTDPathSim2.0/data/GeneCentric.DNAmethylation.CellLine.Rda")
load("~/CTDPathSim2.0/data/GeneCentric.DNAmethylation.Sample.Rda")
load("~/CTDPathSim2.0/data/pat_de_genes.Rda")
load("~/CTDPathSim2.0/data/cell_dm_genes.Rda")
load("~/CTDPathSim2.0/data/pat_dm_genes.Rda")
load("~/CTDPathSim2.0/data/Deconv_meth_gene.Rda")
load("~/CTDPathSim2.0/data/ccle_methylation.Rda")
load("~/CTDPathSim2.0/data/cell_da_genes.Rda")
load("~/CTDPathSim2.0/data/pat_da_genes.Rda")
load("~/CTDPathSim2.0/data/ccle_cnv.Rda")
load("~/CTDPathSim2.0/data/pat_cnv.Rda")
ls()
x<-as.list(ls())
x
x<-unlist(x)
x
save(x, file = "C:/Users/Sarah/Documents/CTDPathSim2.0/data/CTDPathSim2.0.RData")
save(Annotation27K,Annotation450K,CancerGeneList,ccle_cnv,ccle_expr,ccle_methylation,cell_da_genes,cell_de_genes,cell_dm_genes,cell_reactome,CNV.CellLine,CNV.Sample,Deconv_expression,Deconv_meth_gene,Deconv_proportions,expression,Expression.CellLine,Expression.Sample,GeneCentric.DNAmethylation.CellLine,GeneCentric.DNAmethylation.Sample,Methylation.Sample,pat_cnv,pat_da_genes,pat_de_genes,pat_dm_genes,pat_reactome,Reference.CellTypes.Names,Reference.Methylation.CellTypes,Reference.Methylation.Markers,stage1_result_ct, file = "C:/Users/Sarah/Documents/CTDPathSim2.0/data/CTDPathSim2.0.RData")
load("~/CTDPathSim2.0/data/CTDPathSim2.0.RData")
devtools::check()
devtools::check()
load("~/CTDPathSim2.0/data/CTDPathSim2.0.RData")
View(pat_de_genes)
devtools::check()
devtools::check()
?GetCellLineDAFun
?estimate_stability
devtools::check()
?GetCellLineDAFun
?estimate_stability
?GetCellLineDAFun
devtools::check()
?GetCellLineDAFun
devtools::check()
?GetCellLineDAFun
devtools::check()
?GetCellLineDAFun
?GetCellLineDEFun
View(Methylation.Sample)
devtools::check()
?RunDeconvMethylFun
devtools::check()
?RunDeconvMethylFun
View(Reference.Methylation.CellTypes)
devtools::check()
?PlotDeconvMethylFun
devtools::check()
?ProbeToGeneFun
devtools::check()
?SampleMethylFun
devtools::check()
?RunDeconvExprFun
devtools::check()
?FindSimFun
?tTestWithErrorHandling
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
data("CTDPathSim2.0R")
data("CTDPathSim2.0RData")
load("~/CTDPathSim2.0/data/CTDPathSim2.0.RData")
data("CTDPathSim2.0.RData")
getwd()
data("C:/Users/Sarah/Documents/CTDPathSim2.0/CTDPathSim2.0.RData")
data("C:/Users/Sarah/Documents/CTDPathSim2.0/data/CTDPathSim2.0.RData")
help(FindSimFun)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(printr)
install.packages("printr")
library(printr)
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::use_r(data)
usethis::use_r(data)
usethis::use_r("data")
load("~/CTDPathSim2.0/data/CTDPathSim2.RData")
save(pat_cnv,file="~/CTDPathSim2.0/data/pat_cnv.rda")
usethis::use_r("data")
usethis::use_r("pat_cnv")
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
library(printr)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
library(CTDPathSim2.0)
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE)
Reference.Methylation.Probes[1:5]
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::kable(Methylation.Probe.Annotation[1:3,], caption = 'An R dataframe object with probe, symbol and synonym columns of 27K or 450K DNA methylation data annotation.')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
View(Annotation450K)
colnames(Annotation450K)
devtools::build_vignettes()
devtools::build_vignettes()
View(Annotation450K)
devtools::build_vignettes()
knitr::kable(Expression.Sample[1:5,1:5], caption = 'An R dataframe for the gene-centric gene expression (RNASeq) values of the tumor samples.')
View(ccle_expr)
View(CNV.Sample)
View(Expression.CellLine)
devtools::build_vignettes()
knitr::kable(Expression.Sample[1:5,1:3], caption = 'An R dataframe for the gene-centric gene expression (RNASeq) values of the tumor samples.')
```{r}
Expression.CellLine
knitr::kable(Expression.CellLine[1:5,1:3], caption = 'An R dataframe for the gene-centric gene expression (RNASeq) values of the cell lines.')
knitr::kable(CancerGeneList[1:5], caption = 'An R dataframe object with a column of frequently mutated cancer driver genes.')
knitr::kable(GeneCentric.DNAmethylation.Sample[1:5,1:3], caption = 'An R dataframe with gene-centric DNA methylation beta values of bulk tumor samples. Rows are the genes, columns are the tumor samples.')
knitr::kable(GeneCentric.DNAmethylation.CellLine[1:5,1:3], caption = 'An R dataframe with gene-centric DNA methylation beta values of cell lines. Rows are the genes, columns are the cell lines.')
knitr::kable(CNV.CellLine[1:5,1:3], caption = 'An R dataframe with gene-centric copy number values of cell lines. Rows are the genes, columns are the cell lines.')
devtools::build_vignettes()
.Last.error
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE)
# Outputs
knitr::kable(stage1_result_ct$methylation[1:5,], caption = 'Estimated DNA methylation profile of constituent cell types.')
devtools::build_vignettes()
load("~/CTD123/Sample_expression/TCGA-OR-A5J1-01A.Rda")
devtools::build_vignettes()
pat_de_genes
pat_de_genes[1:5,]
devtools::build_vignettes()
devtools::build_vignettes()
# Running the function
Deconv_methylation <- stage1_result_ct$methylation
Deconv_meth_gene <- ProbeToGeneFun(Annotation450K,Deconv_methylation,"450K")
Deconv_meth_gene <- ProbeToGeneFun(Annotation450K,Deconv_methylation,"450K")
devtools::check()
devtools::build_vignettes()
?ProbeToGeneFun
# Running the function
Deconv_methylation <- stage1_result_ct$methylation
Deconv_meth_gene <-
ProbeToGeneFun(Annotation450K,Deconv_methylation,"450K")
# Output
knitr::kable(Deconv_meth_gene[1:5,], caption = 'An R dataframe object with deconvoluted DNA methylation values for each gene in cell types. The rows are the genes and the columns are the cell types. This function labels the columns as V1, V2, V3,....etc.')
devtools::build_vignettes()
devtools::build_vignettes()
# Running the function to compute DNA methylation based Spearman similarity score of a patient-cell line pair
FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation)
x<-FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation)
x
FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE)
library(CTDPathSim2.0)
library(printr)
data("CTDPathSim2")
load("~/CTDPathSim2.0/data/CTDPathSim2.RData")
knitr::kable(Methylation.Sample[1:5,1:3], digits = 2, caption = 'Probe-centric DNA methylation values of the tumor samples.')
knitr::kable(Reference.Methylation.Markers[1:5], caption = 'The marker loci (probes) of reference cell types.')
knitr::kable(Reference.Methylation.CellTypes[1:3,1:3], caption = 'R dataframe for the DNA methylation values for the reference cell types and the probes.')
knitr::kable(Annotation27K[1:3,], caption = 'An R dataframe object with probe, symbol and synonym columns of 27K DNA methylation data annotation.')
knitr::kable(Annotation450K[c(6,7,10),], caption = 'An R dataframe object with probe ID, UCSC_REFGENE_NAME and UCSC_REFGENE_GROUP columns 450K DNA methylation data annotation.')
knitr::kable(Expression.Sample[1:5,1:3], caption = 'An R dataframe for the gene-centric gene expression (RNASeq) values of the tumor samples.')
knitr::kable(Expression.CellLine[1:5,1:3], caption = 'An R dataframe for the gene-centric gene expression (RNASeq) values of the cell lines.')
knitr::kable(CancerGeneList[1:5,], caption = 'An R dataframe object with a column of frequently mutated cancer driver genes.')
knitr::kable(GeneCentric.DNAmethylation.Sample[1:5,1:3], caption = 'An R dataframe with gene-centric DNA methylation beta values of bulk tumor samples. Rows are the genes, columns are the tumor samples.')
knitr::kable(GeneCentric.DNAmethylation.CellLine[1:5,1:3], caption = 'An R dataframe with gene-centric DNA methylation beta values of cell lines. Rows are the genes, columns are the cell lines.')
knitr::kable(CNV.CellLine[1:5,1:3], caption = 'An R dataframe with gene-centric copy number values of cell lines. Rows are the genes, columns are the cell lines.')
?RunDeconvMethylFun
devtools::check()
library(sqldf)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?GetSampleDEFun
?GetSampleDEFun
# Running the function
GetSampleDEFun(RnaSeq_data=Expression.Sample,parallel= TRUE,ncores=2, CTDDirectory)
?GetSampleDEFun
# Running the function
CTDDirectory <- tempdir()
GetSampleDEFun(RnaSeq_data=Expression.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Ouput
load("~/Patient_DE_genes/DE_Gene/TCGA-OR-A5J6-01A_pat_de_genes.Rda")
?GetSampleDEFun
# Running the function
CTDDirectory <- tempdir()
GetSampleDEFun(RnaSeq_data=Expression.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/Patient_DE_genes/DE_Gene/TCGA-OR-A5J6-01A_pat_de_genes.Rda"))
knitr::kable(pat_de_genes[1:5,], caption = 'DE genes of the sample TCGA-OR-A5J1-01A')
# Output
load(paste0(CTDDirectory,"/Patient_DE_genes/DE_Gene/TCGA-OR-A5J6-01A_pat_de_genes.Rda"))
?GetSampleDEFun
# Running the function
CTDDirectory <- tempdir()
GetSampleDEFun(RnaSeq_data=Expression.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/Patient_DE_genes/DE_Gene/TCGA-OR-A5J6-01A_pat_de_genes.Rda"))
knitr::kable(pat_de_genes[1:5,], caption = 'DE genes of the sample TCGA-OR-A5J1-01A')
View(pat_de_genes)
CTDDirectory
?GetSampleDEFun
# Running the function
CTDDirectory <- tempdir()
GetSampleDEFun(RnaSeq_data=Expression.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/Patient_DE_genes/DE_Gene/TCGA-OR-A5J6-01A_pat_de_genes.Rda"))
knitr::kable(pat_de_genes, caption = 'DE genes of the sample TCGA-OR-A5J1-01A')
?GetCellLineDEFun
# Running the function
GetCellLineDEFun(RnaSeq_data=Expression.CellLine,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load("~/CellLine_DE_genes/DE_Gene/MCF7_cell_de_genes.Rda")
?GetCellLineDEFun
# Running the function
GetCellLineDEFun(RnaSeq_data=Expression.CellLine,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/CellLine_DE_genes/DE_Gene/MCF7_cell_de_genes.Rda"))
?GetCellLineDEFun
# Running the function
GetCellLineDEFun(RnaSeq_data=Expression.CellLine,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/CellLine_DE_genes/DE_Gene/LK2_LUNG_cell_de_genes.Rda"))
knitr::kable(cell_de_genes, caption = 'DE genes of the LK2 lung cancer cell line')
knitr::kable(cell_de_genes, caption = 'DE genes of the LK2 lung cancer cell line')
?GetCellLineDEFun
# Running the function
GetCellLineDEFun(RnaSeq_data=Expression.CellLine,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/CellLine_DE_genes/DE_Gene/LK2_LUNG_cell_de_genes.Rda"))
knitr::kable(cell_de_genes[1:5,], caption = 'DE genes of the LK2 lung cancer cell line')
knitr::kable(cell_de_genes[1:5,,drop=F], caption = 'DE genes of the LK2 lung cancer cell line')
?GetPathFun
# Running the function
Enriched.pathways.sample<-GetPathFun(CancerGeneList,pat_de_genes)
Enriched.pathways.cellLine<-GetPathFun(CancerGeneList,cell_de_genes)
# Output
knitr::kable(Enriched.pathways[1:5,], caption = 'Sample(TCGA-OR-A5J1-01A)-specific enriched biological pathways')
?GetPathFun
# Running the function
data("CTDPathSim2")
Enriched.pathways.sample<-GetPathFun(CancerGeneList,pat_de_genes)
Enriched.pathways.cellLine<-GetPathFun(CancerGeneList,cell_de_genes)
# Output
knitr::kable(Enriched.pathways[1:5,], caption = 'Sample(TCGA-OR-A5J1-01A)-specific enriched biological pathways')
?GetPathFun
# Running the function
data("CTDPathSim2")
Enriched.pathways.sample<-GetPathFun(CancerGeneList,pat_de_genes)
Enriched.pathways.cellLine<-GetPathFun(CancerGeneList,cell_de_genes)
# Output
knitr::kable(Enriched.pathways.sample[1:5,], caption = 'Sample(TCGA-OR-A5J1-01A)-specific enriched biological pathways')
knitr::kable(Enriched.pathways.cellLine[1:5,], caption = 'Cell line(MCF7)-specific enriched biological pathways')
?GetSampleDMFun
# Running the function
GetSampleDMFun(GeneCentric.DNAmethylation.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/Patient_DM_genes/DM_Gene/TCGA-OR-A5J6-01A_pat_dm_genes.Rda"))
?GetSampleDMFun
# Running the function
GetSampleDMFun(GeneCentric.DNAmethylation.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/Patient_DM_genes/DE_Gene/TCGA-OR-A5J6-01A_pat_dm_genes.Rda"))
knitr::kable(pat_dm_genes[1:5,], caption = 'DM genes of the sample TCGA-OR-A5J1-01A')
View(GeneCentric.DNAmethylation.Sample)
View(GeneCentric.DNAmethylation.Sample)
DNAmethylation_data <-GeneCentric.DNAmethylation.Sample
DNAmethylation_data<-as.data.frame(DNAmethylation_data)
DNAmethylation_data[DNAmethylation_data==0]<-0.00000000001 ## to avoid the log transformation of 0
#Writing a function for transforming beta values to M values
Mtranform <- function(x) {log(x[1]/(1-x[1]))}
n<-ncol(DNAmethylation_data)
DNAmethylation_data[, seq_len(n) ] <- as.data.frame(lapply(DNAmethylation_data[, seq_len(n) ], FUN = function(x) {vapply(x, FUN = Mtranform, FUN.VALUE = 1.0)}))
x <- data.table(rowMedians(as.matrix(DNAmethylation_data),na.rm=TRUE))
colnames(x)<-"Median_expr"
DNAmethylation_data<-cbind(DNAmethylation_data,x)
n<-ncol(DNAmethylation_data)
n<-as.integer(n)
fileNames1<-colnames(DNAmethylation_data)
fileNames<-fileNames1[seq_len(n-1)]
fileNames
SampleName <- fileNames[1]
# Output
load(paste0(CTDDirectory,"/Patient_DM_genes/DM_Gene/TCGA-OR-A5J6-01A_pat_dm_genes.Rda"))
load(paste0(CTDDirectory,"/Patient_DM_genes/DE_Gene/TCGA-OR-A5J6-01A_pat_dm_genes.Rda"))
knitr::kable(pat_dm_genes[1:5,], caption = 'DM genes of the sample TCGA-OR-A5J1-01A')
knitr::kable(pat_dm_genes, caption = 'DM genes of the sample TCGA-OR-A5J1-01A')
SampleName <- fileNames[1]
DNAmethylation_data<-as.data.frame(DNAmethylation_data)
gene_meth<-DNAmethylation_data[,SampleName,drop=FALSE]
gene_med<-DNAmethylation_data[,c(1,n),drop=FALSE]
gene_meth_med<-cbind(gene_med,gene_meth)
colnames(gene_meth_med)<-c("gene","median_meth","meth")
gene_meth_med[gene_meth_med$median_meth==0,2]<-0.00000000001 ## to avoid divison by 0 for fold change
gene_meth_med[gene_meth_med$meth==0,3]<-0.00000000001 ## to get non zero fold change, removing fold change = 0 for down gene
gene_meth_med$fold_change<-abs(gene_meth_med$meth/gene_meth_med$median_meth)
upgene<-gene_meth_med[gene_meth_med$fold_change>=4,]## 271 genes
downgene<-gene_meth_med[gene_meth_med$fold_change<=0.25,]## 449 genes
pat_dm_genes <- data.table(rbind(upgene,downgene))[,1]
pat_dm_genes
upgene
gene_meth
gene_med
gene_meth_med<-cbind(gene_med,gene_meth)
gene_meth_med
View(DNAmethylation_data)
n
X<-DNAmethylation_data[1:5,80:81]
X
genes <- as.data.table(row.names(DNAmethylation_data))
colnames(genes)<-"gene"
DNAmethylation_data <- cbind(genes,DNAmethylation_data)
gene_meth<-DNAmethylation_data[,SampleName,drop=FALSE]
DNAmethylation_data <- as.data.frame(DNAmethylation_data)
gene_meth<-DNAmethylation_data[,SampleName,drop=FALSE]
gene_meth
gene_med<-DNAmethylation_data[,c(1,n),drop=FALSE]
gene_meth_med<-cbind(gene_med,gene_meth)
gene_meth_med
colnames(gene_meth_med)<-c("gene","median_meth","meth")
gene_meth_med[gene_meth_med$median_meth==0,2]<-0.00000000001 ## to avoid divison by 0 for fold change
gene_meth_med[gene_meth_med$meth==0,3]<-0.00000000001 ## to get non zero fold change, removing fold change = 0 for down gene
gene_meth_med$fold_change<-abs(gene_meth_med$meth/gene_meth_med$median_meth)
upgene<-gene_meth_med[gene_meth_med$fold_change>=4,]## 271 genes
downgene<-gene_meth_med[gene_meth_med$fold_change<=0.25,]## 449 genes
pat_dm_genes <- data.table(rbind(upgene,downgene))[,1]
pat_dm_genes
?GetSampleDMFun
# Running the function
GetSampleDMFun(GeneCentric.DNAmethylation.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/Patient_DM_genes/DM_Gene/TCGA-OR-A5J6-01A_pat_dm_genes.Rda"))
devtools::load_all()
?GetSampleDMFun
# Running the function
GetSampleDMFun(GeneCentric.DNAmethylation.Sample,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/Patient_DM_genes/DM_Gene/TCGA-OR-A5J6-01A_pat_dm_genes.Rda"))
knitr::kable(pat_dm_genes, caption = 'DM genes of the sample TCGA-OR-A5J1-01A')
?GetCellLineDMFun
# Running the function
GetCellLineDMFun(GeneCentric.DNAmethylation.CellLine,parallel= TRUE,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"~/CellLine_DM_genes/DE_Gene/MCF7_cell_dm_genes.Rda"))
# Output
load(paste0(CTDDirectory,"~/CellLine_DM_genes/DE_Gene/LK2_LUNG_cell_dm_genes.Rda"))
# Output
load(paste0(CTDDirectory,"/CellLine_DM_genes/DE_Gene/LK2_LUNG_cell_dm_genes.Rda"))
knitr::kable(cell_dm_genes, caption = 'DM genes of the MCF7 cell line')
?GetCellLineDAFun
# Running the function
GetCellLineDAFun(CNV.CellLine,parallel= TRUE,ncores=2, CTDDirectory)
?GetCellLineDAFun
# Running the function
GetCellLineDAFun(CNV.CellLine,ncores=2, CTDDirectory)
?GetCellLineDAFun
# Running the function
GetCellLineDAFun(CNV.CellLine,ncore=2, CTDDirectory)
devtools::load_all()
?GetCellLineDAFun
# Running the function
GetCellLineDAFun(CNV.CellLine,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/CellLine_DA_genes/DA_Gene/LK2_LUNG_cell_da_genes.Rda"))
devtools::load_all()
?GetCellLineDAFun
# Running the function
GetCellLineDAFun(CNV.CellLine,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/CellLine_DA_genes/DA_Gene/LK2_LUNG_cell_da_genes.Rda"))
devtools::load_all()
?GetCellLineDAFun
# Running the function
GetCellLineDAFun(CNV.CellLine,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/CellLine_DA_genes/DA_Gene/LK2_LUNG_cell_da_genes.Rda"))
# Output
load(paste0(CTDDirectory,"/CellLine_DA_genes/DA_Gene/LK2_LUNG_cell_dm_genes.Rda"))
?GetCellLineDAFun
# Running the function
GetCellLineDAFun(CNV.CellLine,ncores=2, CTDDirectory)
# Output
load(paste0(CTDDirectory,"/CellLine_DA_genes/DA_Gene/LK2_LUNG_cell_dm_genes.Rda"))
knitr::kable(cell_da_genes[1:5,], caption = 'DA genes of the LK2 cell line')
?FindSimFun
# Running the function to compute DNA methylation based Spearman similarity score of a patient-cell line pair
data("CTDPathSim2")
FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation)
# Running the function to compute gene expression based Spearman similarity score of a patient-cell line pair
FindSimFun(pat_de_genes,pat_reactome,Deconv_expression,cell_de_genes,cell_reactome,ccle_expr)
# Running the function to compute copy number value based Spearman similarity score of a patient-cell line pair
FindSimFun(pat_da_genes,pat_reactome,pat_cnv,cell_da_genes,cell_reactome,ccle_cnv)
devtools::check()
devtools::check()
devtools::build_vignettes()
?FindSimFun
# Running the function to compute DNA methylation based Spearman similarity score of a patient-cell line pair
data("CTDPathSim2")
print(FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation))
# Running the function to compute gene expression based Spearman similarity score of a patient-cell line pair
FindSimFun(pat_de_genes,pat_reactome,Deconv_expression,cell_de_genes,cell_reactome,ccle_expr)
# Running the function to compute copy number value based Spearman similarity score of a patient-cell line pair
FindSimFun(pat_da_genes,pat_reactome,pat_cnv,cell_da_genes,cell_reactome,ccle_cnv)
FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation)[1,1]
devtools::check()
devtools::build_vignettes()
knitr::kable(x, caption = 'DNA methylation based Spearman similarity score of a patient-cell line pair')
?FindSimFun
# Running the function to compute DNA methylation based Spearman similarity score of a patient-cell line pair
data("CTDPathSim2")
x<-FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation)
knitr::kable(x, caption = 'DNA methylation based Spearman similarity score of a patient-cell line pair')
# Running the function to compute gene expression based Spearman similarity score of a patient-cell line pair
FindSimFun(pat_de_genes,pat_reactome,Deconv_expression,cell_de_genes,cell_reactome,ccle_expr)[1,1]
# Running the function to compute copy number value based Spearman similarity score of a patient-cell line pair
FindSimFun(pat_da_genes,pat_reactome,pat_cnv,cell_da_genes,cell_reactome,ccle_cnv)[1,1]
?FindSimFun
# Running the function to compute DNA methylation based Spearman similarity score of a patient-cell line pair
data("CTDPathSim2")
x<-FindSimFun(pat_dm_genes,pat_reactome,Deconv_meth_gene,cell_dm_genes,cell_reactome,ccle_methylation)
knitr::kable(x, caption = 'DNA methylation based Spearman similarity score of a patient-cell line pair')
# Running the function to compute gene expression-based Spearman similarity score of a patient-cell line pair
y<-FindSimFun(pat_de_genes,pat_reactome,Deconv_expression,cell_de_genes,cell_reactome,ccle_expr)
knitr::kable(y, caption = 'gene expression-based Spearman similarity score of a patient-cell line pair')
# Running the function to compute copy number value based Spearman similarity score of a patient-cell line pair
z<-FindSimFun(pat_da_genes,pat_reactome,pat_cnv,cell_da_genes,cell_reactome,ccle_cnv)
knitr::kable(z, caption = 'copy number aberration-based Spearman similarity score of a patient-cell line pair')
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
render("CTDPathSim2.0.Rmd", BiocStyle::pdf_document())
rmarkdown::render("CTDPathSim2.0.Rmd", BiocStyle::pdf_document())
getwd()
rmarkdown::render("C:/Users/Sarah/Documents/CTDPathSim2.0/vignettes/CTDPathSim2.0.Rmd", BiocStyle::pdf_document())
devtools::install
getwd()
devtools::install("C:/Users/Sarah/Documents/CTDPathSim2.0")
library(CTDPathSim2.0)
browseVignettes(CTDPathSim2.0)
